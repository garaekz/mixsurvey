datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String  @id @default(cuid())
  name      String
  email     String  @unique
  avatarUrl String?
  googleId  String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  surveys   Survey[]
  responses Response[]
  respondents Respondent[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model CustomField {
  id     String   @id @default(cuid())
  key   String   @unique
  value   String   @unique
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  surveyId String
}

model Survey {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  slug        String   @unique
  description String?
  instructions String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  customFields CustomField[]

  questions Question[]
  responses  Response[]
}

model QuestionType {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  questions Question[]
}

model Question {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  surveyId String

  questionType   QuestionType @relation(fields: [questionTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionTypeId String

  options Option[]
}

model Option {
  id        String   @id @default(cuid())
  text      String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId String
  answers     Answer[]
}

model Response {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  surveyId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  answers Answer[]
  respondents Respondent[]
}

model Answer {
  id        String   @id @default(cuid())
  value      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  responseId String

  option   Option @relation(fields: [optionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  optionId String
}

model Respondent {
  id        String   @id @default(cuid())
  email     String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  responseId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}